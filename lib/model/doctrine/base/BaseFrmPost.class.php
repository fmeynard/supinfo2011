<?php

/**
 * BaseFrmPost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property clob $content
 * @property integer $topic_id
 * @property integer $user_id
 * @property integer $forum_id
 * @property string $author_name
 * @property timestamp $date
 * @property FrmForum $FrmForum
 * @property FrmTopic $FrmTopic
 * @property sfGuardUser $sfGuardUser
 * 
 * @method integer     getId()          Returns the current record's "id" value
 * @method string      getTitle()       Returns the current record's "title" value
 * @method clob        getContent()     Returns the current record's "content" value
 * @method integer     getTopicId()     Returns the current record's "topic_id" value
 * @method integer     getUserId()      Returns the current record's "user_id" value
 * @method integer     getForumId()     Returns the current record's "forum_id" value
 * @method string      getAuthorName()  Returns the current record's "author_name" value
 * @method timestamp   getDate()        Returns the current record's "date" value
 * @method FrmForum    getFrmForum()    Returns the current record's "FrmForum" value
 * @method FrmTopic    getFrmTopic()    Returns the current record's "FrmTopic" value
 * @method sfGuardUser getSfGuardUser() Returns the current record's "sfGuardUser" value
 * @method FrmPost     setId()          Sets the current record's "id" value
 * @method FrmPost     setTitle()       Sets the current record's "title" value
 * @method FrmPost     setContent()     Sets the current record's "content" value
 * @method FrmPost     setTopicId()     Sets the current record's "topic_id" value
 * @method FrmPost     setUserId()      Sets the current record's "user_id" value
 * @method FrmPost     setForumId()     Sets the current record's "forum_id" value
 * @method FrmPost     setAuthorName()  Sets the current record's "author_name" value
 * @method FrmPost     setDate()        Sets the current record's "date" value
 * @method FrmPost     setFrmForum()    Sets the current record's "FrmForum" value
 * @method FrmPost     setFrmTopic()    Sets the current record's "FrmTopic" value
 * @method FrmPost     setSfGuardUser() Sets the current record's "sfGuardUser" value
 * 
 * @package    d
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseFrmPost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('frm_Post');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('topic_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('forum_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('author_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));

        $this->option('type', 'MySIAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FrmForum', array(
             'local' => 'forum_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('FrmTopic', array(
             'local' => 'topic_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}