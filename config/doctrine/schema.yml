options:
  type: MySIAM
  
Package:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            package
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    short_description:  { type: string(255) }
    description:        { type: clob }
    price:              { type: float(7), scale: 2, notnull: true }
    is_active:          { type: boolean, default: 0 }
    image:              { type: string(255) }
    category_id:        { type: integer, notnull: true }
  relations:
    Category:           { class: Category, local: category_id, foreign: id, onDelete: SET NULL }
    Offers:             { class: Offer, foreignAlias: Packages, refClass: PackageHasOffer, local: package_id, foreign: offer_id}
    
PackageHasOffer:
    tableName:          package_has_offer
    columns:
        id:             { type: integer, notnull: true, primary: true, autoincrement: true}
        package_id:     { type: integer, primary: true }
        offer_id:       { type: integer, primary: true }
    relations:
        Package:        { local: package_id, foreign: id, foreignAlias: PackagesOffers }
        Offer:          { local: offer_id,   foreign: id, foreignAlias: PackagesOffers }
    
Offer:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            single_offer
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    short_description:  { type: string(255) }
    description:        { type: clob }
    price:              { type: float(7), scale: 2 }
    category_id:        { type: integer, notnull: true }
    is_active:          { type: boolean }
    is_package_only:    { type: boolean }
  relations:
    Category:           { class: Category, local: category_id, foreign: id, onDelete: SET NULL }

Category:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            category
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    short_description:  { type: string(255) }
    description:        { type: clob }
    image:              { type: string(255) }
    category_id:        { type: integer }
    is_active:          { type: boolean }
  relations:
    Category:           { class: Category, local: category_id, foreign: id }

Agency:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            agency
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    address:            { type: string(255), notnull: true }
    address_bis:        { type: string(255) }
    phone:              { type: string(15) }
    mail:               { type: string(100) }
    fax:                { type: string(15) }

AgencyRoom:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            agency_room
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    agency_id:          { type: integer }
    capacity:           { type: integer }
  relations:
    Agency:             { class: Agency, local: agency_id, foreign: id, onDelete: SET NULL }

FormationCenter:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            formation_center
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    agency_id:          { type: integer }
    image:              { type: string(255) }
    address:            { type: string(255) }
    address_bis:        { type: string(255) }
    capacity:           { type: integer }
  relations:
    Agency:             { class: Agency,        foreign: id, local: agency_id,          onDelete: SET NULL }

FormationType:
  tableName:            formation_type
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }

FormationSession:
  tableName:            formation_session
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64) }
    formation_type_id:  { type: integer }
    agency_id:          { type: integer }
    formation_center_id:{ type: integer }
    agency_room_id:     { type: integer }
    capacity:           { type: integer }
    date_start:         { type: timestamp }
    date_end:           { type: timestamp }
  relations:
    FormationType:      { class: FormationType, foreign: id, local: formation_type_id,  onDelete: SET NULL }
    Agency:             { class: Agency,        foreign: id, local: agency_id,          onDelete: SET NULL }
    FormationCenter:    { class: FormationCenter,foreign: id, local: formation_center_id,onDelete: SET NULL }
    AgencyRoom:         { class: AgencyRoom,     foreign: id, local: agency_room_id,    onDelete: SET NULL }
    
FormationHasTeacher:
  tableName:            formation_has_teacher
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    formation_session_id:   { type: integer }
    teacher_id:         { type: integer }
  relations:
    FormationSession:   { class: FormationSession, foreign: id, local: formation_session_id }
    sfGuardUser:        { class: sfGuardUser, local: teacher_id, foreign: id }
    
FormationHasUser:
  tableName:            formation_has_user
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true }
    formation_session_id: { type: integer }
    user_id:            { type: integer }
    is_valid:           { type: boolean }
    grade:              { type: integer }
  relations:
    FormationSession:   { class: FormationSession, foreign: id, local: formation_session_id }
    sfGuardUser:        { class: sfGuardUser, local: user_id, foreign: id }
    
FormationHasVehicle:
  tableName:            formation_has_vehicle
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true }
    formation_session_id:   { type: integer }
    vehicle_id:         { type: integer }
  relations:
    Vehicle:            { class: Vehicle, local: vehicle_id, foreign: id }
    FormationSession:   { class: FormationSession, local: formation_session_id, foreign: id }

VehicleType:
  tableName:            vehicle_type
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true }
    name:               { type: string(64), notnull: true }

Vehicle:
  actAs:
      Sluggable:
        fields: [name]
  tableName:            vehicle
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    name:               { type: string(64), notnull: true }
    brand:              { type: string(64) }
    model:              { type: string(64) }
    year:               { type: timestamp }
    purchase_date:      { type: timestamp }
    next_verif_start:   { type: timestamp }
    next_verif_end:     { type: timestamp }
    agency_id:          { type: integer, notnull: true }
    vehicle_type_id:    { type: integer, notnull: true }
  relations: 
    Agency:             { class: Agency, foreign: id, local: agency_id }
    VehicleType:        { class: VehicleType, foreign: id, local: vehicle_type_id }

VehicleVerification:
  tableName:            vehicle_verification
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    vehicle_id:         { type: integer }
    date_start:         { type: timestamp }
    date_end:           { type: timestamp }
  relations:
    Vehicle:            { class: Vehicle, foreign: id, local: vehicle_id, onDelete: NULL }

sfGuardUserProfile:
  actAs: 
    Sluggable:
      fields:           [first_name, last_name]
  tableName:            sf_guard_user_profile
  columns:
    id:                 { type: integer, notnull: true, primary: true, autoincrement: true}
    sf_guard_user_id:   { type: integer, notnull: true }
    agency_id:          { type: integer }
    first_name:         { type: string(64) }
    last_name:          { type: string(64) }
    birthday:           { type: timestamp }
    type:               { type: integer }
    mail:               { type: string(64) }
    phone:              { type: string(15) }
    mobile:             { type: string(15) }
  relations:
    sfGuardUser:        { class: sfGuardUser, local: sf_guard_user_id, foreign: id, type: one , foreignType: one, foreignAlias: Profile }
    Agency:             { class: Agency, local: agency_id, foreign: id }